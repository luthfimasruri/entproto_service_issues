// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NasServiceClient is the client API for NasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NasServiceClient interface {
	Create(ctx context.Context, in *CreateNasRequest, opts ...grpc.CallOption) (*Nas, error)
	Get(ctx context.Context, in *GetNasRequest, opts ...grpc.CallOption) (*Nas, error)
	Update(ctx context.Context, in *UpdateNasRequest, opts ...grpc.CallOption) (*Nas, error)
	Delete(ctx context.Context, in *DeleteNasRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	List(ctx context.Context, in *ListNasRequest, opts ...grpc.CallOption) (*ListNasResponse, error)
}

type nasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNasServiceClient(cc grpc.ClientConnInterface) NasServiceClient {
	return &nasServiceClient{cc}
}

func (c *nasServiceClient) Create(ctx context.Context, in *CreateNasRequest, opts ...grpc.CallOption) (*Nas, error) {
	out := new(Nas)
	err := c.cc.Invoke(ctx, "/entpb.NasService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nasServiceClient) Get(ctx context.Context, in *GetNasRequest, opts ...grpc.CallOption) (*Nas, error) {
	out := new(Nas)
	err := c.cc.Invoke(ctx, "/entpb.NasService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nasServiceClient) Update(ctx context.Context, in *UpdateNasRequest, opts ...grpc.CallOption) (*Nas, error) {
	out := new(Nas)
	err := c.cc.Invoke(ctx, "/entpb.NasService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nasServiceClient) Delete(ctx context.Context, in *DeleteNasRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.NasService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nasServiceClient) List(ctx context.Context, in *ListNasRequest, opts ...grpc.CallOption) (*ListNasResponse, error) {
	out := new(ListNasResponse)
	err := c.cc.Invoke(ctx, "/entpb.NasService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NasServiceServer is the server API for NasService service.
// All implementations must embed UnimplementedNasServiceServer
// for forward compatibility
type NasServiceServer interface {
	Create(context.Context, *CreateNasRequest) (*Nas, error)
	Get(context.Context, *GetNasRequest) (*Nas, error)
	Update(context.Context, *UpdateNasRequest) (*Nas, error)
	Delete(context.Context, *DeleteNasRequest) (*emptypb.Empty, error)
	List(context.Context, *ListNasRequest) (*ListNasResponse, error)
	mustEmbedUnimplementedNasServiceServer()
}

// UnimplementedNasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNasServiceServer struct {
}

func (UnimplementedNasServiceServer) Create(context.Context, *CreateNasRequest) (*Nas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNasServiceServer) Get(context.Context, *GetNasRequest) (*Nas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNasServiceServer) Update(context.Context, *UpdateNasRequest) (*Nas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNasServiceServer) Delete(context.Context, *DeleteNasRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNasServiceServer) List(context.Context, *ListNasRequest) (*ListNasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNasServiceServer) mustEmbedUnimplementedNasServiceServer() {}

// UnsafeNasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NasServiceServer will
// result in compilation errors.
type UnsafeNasServiceServer interface {
	mustEmbedUnimplementedNasServiceServer()
}

func RegisterNasServiceServer(s grpc.ServiceRegistrar, srv NasServiceServer) {
	s.RegisterService(&NasService_ServiceDesc, srv)
}

func _NasService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NasServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NasService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NasServiceServer).Create(ctx, req.(*CreateNasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NasService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NasServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NasService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NasServiceServer).Get(ctx, req.(*GetNasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NasService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NasServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NasService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NasServiceServer).Update(ctx, req.(*UpdateNasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NasService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NasServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NasService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NasServiceServer).Delete(ctx, req.(*DeleteNasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NasService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NasServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NasService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NasServiceServer).List(ctx, req.(*ListNasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NasService_ServiceDesc is the grpc.ServiceDesc for NasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.NasService",
	HandlerType: (*NasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NasService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NasService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NasService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NasService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NasService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
