// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	ent "mify_api_radius/ent"
	nas "mify_api_radius/ent/nas"
	strconv "strconv"
)

// NasService implements NasServiceServer
type NasService struct {
	client *ent.Client
	UnimplementedNasServiceServer
}

// NewNasService returns a new NasService
func NewNasService(client *ent.Client) *NasService {
	return &NasService{
		client: client,
	}
}

// toProtoNas transforms the ent type to the pb type
func toProtoNas(e *ent.Nas) (*Nas, error) {
	v := &Nas{}
	id := int32(e.ID)
	v.Id = id
	nasname := e.Nasname
	v.Nasname = nasname
	return v, nil
}

// Create implements NasServiceServer.Create
func (svc *NasService) Create(ctx context.Context, req *CreateNasRequest) (*Nas, error) {
	nas := req.GetNas()
	m := svc.client.Nas.Create()
	nasNasname := nas.GetNasname()
	m.SetNasname(nasNasname)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoNas(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements NasServiceServer.Get
func (svc *NasService) Get(ctx context.Context, req *GetNasRequest) (*Nas, error) {
	var (
		err error
		get *ent.Nas
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetNasRequest_VIEW_UNSPECIFIED, GetNasRequest_BASIC:
		get, err = svc.client.Nas.Get(ctx, id)
	case GetNasRequest_WITH_EDGE_IDS:
		get, err = svc.client.Nas.Query().
			Where(nas.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoNas(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements NasServiceServer.Update
func (svc *NasService) Update(ctx context.Context, req *UpdateNasRequest) (*Nas, error) {
	nas := req.GetNas()
	nasID := int(nas.GetId())
	m := svc.client.Nas.UpdateOneID(nasID)
	nasNasname := nas.GetNasname()
	m.SetNasname(nasNasname)
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoNas(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements NasServiceServer.Delete
func (svc *NasService) Delete(ctx context.Context, req *DeleteNasRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Nas.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements NasServiceServer.List
func (svc *NasService) List(ctx context.Context, req *ListNasRequest) (*ListNasResponse, error) {
	var (
		err      error
		entList  []*ent.Nas
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Nas.Query().
		Order(ent.Desc(nas.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(nas.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListNasRequest_VIEW_UNSPECIFIED, ListNasRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListNasRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		var pbList []*Nas
		for _, entEntity := range entList {
			pbEntity, err := toProtoNas(entEntity)
			if err != nil {
				return nil, status.Errorf(codes.Internal, "internal error: %s", err)
			}
			pbList = append(pbList, pbEntity)
		}
		return &ListNasResponse{
			NasList:       pbList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
